C51 COMPILER V9.60.7.0   ADC                                                               05/05/2025 11:30:18 PAGE 1   


C51 COMPILER V9.60.7.0, COMPILATION OF MODULE ADC
OBJECT MODULE PLACED IN .\Release\Objects\adc.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE ..\..\Hardware\adc.c OPTIMIZE(9,SIZE) BROWSE INTVECTOR(0X8000) INCDIR(..
                    -\..\Libraries\Include;..\..\User;..\..\Hardware;..\..\App) INTERVAL(3) DEBUG OBJECTEXTEND PRINT(.\Release\Listings\adc.l
                    -st) OBJECT(.\Release\Objects\adc.obj)

line level    source

   1          #include "adc.h"
*** WARNING C322 IN LINE 71 OF \BaiduSyncdisk\A_WorkSt\Aworkst\2025-01-22-project250122-À’–¿-∞¥ƒ¶“«”Ô“ÙøÓ-SX384\code\pro
             -ject-250122-TX8C1011\Libraries\Include\debug.h: unknown identifier
   2          
   3          // volatile u16 adc_val = 0;
   4          
   5          // void adc_config(void)
   6          // {
   7          //     // P04 AIN4 Ê£ÄÊµãÂÖÖÁîµÂè£‰º†ËøáÊù•ÁöÑadÂÄº
   8          //     P0_MD1 |= 0x03;        // Ê®°ÊãüÊ®°Âºè
   9          //     P0_AIOEN |= 0x01 << 4; // ‰ΩøËÉΩÊ®°ÊãüÂäüËÉΩ
  10          
  11          //     // P05 AIN5 Ê£ÄÊµãÁîµÊ±†ÂàÜÂéãÂêéÁöÑadÂÄº
  12          //     P0_MD1 |= 0x03 << 2;   // Ê®°ÊãüÊ®°Âºè
  13          //     P0_AIOEN |= 0x01 << 5; // ‰ΩøËÉΩÊ®°ÊãüÂäüËÉΩ
  14          
  15          //     // ‰ΩøÁî® P06 AIN06 Ê£ÄÊµãÁîµÊú∫ÊòØÂê¶Â†µËΩ¨
  16          //     P1_MD1 |= 0x3 << 4;    // Ê®°ÊãüÊ®°Âºè
  17          //     P1_AIOEN |= 0x01 << 6; // ‰ΩøËÉΩÊ®°ÊãüÂäüËÉΩ
  18          
  19          //     AIP_CON2 |= 0xC0; // ‰ΩøËÉΩADC‰∏≠CMP‰ΩøËÉΩ‰ø°Âè∑ÂíåCMPÊ†°ÂáÜÂäüËÉΩ
  20          //     AIP_CON4 |= 0x01; // ‰ΩøËÉΩADCÂÅèÁΩÆÁîµÊµÅÔºåÂèÇËÄÉÁîµÂéãÈÄâÊã©ÂÜÖÈÉ®2.4V(Note: ‰ΩøÁî®ÂÜÖÈÉ®ÂèÇËÄÉÊ
             -ó∂ÔºåËäØÁâáÈúÄÂú®5VÁîµÂéã‰æõÁîµ‰∏ã)
  21          
  22          //     ADC_CFG1 = 0x3C; // ADCÊó∂ÈíüÂàÜÈ¢ëÔºå16ÂàÜÈ¢ë
  23          //     ADC_CFG2 = 0xFF; // ADCÈááÊ†∑Êó∂ÈíüÔºå256‰∏™ADCÊó∂Èíü
  24          // }
  25          
  26          // ÂàáÊç¢adcÊ£ÄÊµãÁöÑÂºïËÑö
  27          void adc_sel_channel(u8 adc_channel)
  28          {
  29   1      #if 0  // ÂèØ‰ª•ËäÇÁúÅ7Â≠óËäÇÁ®ãÂ∫èÁ©∫Èó¥
                  // ÈÅøÂÖçÂâçÂêéÂàáÊç¢Áõ∏ÂêåÁöÑÈÄöÈÅìÔºåËäÇÁúÅÊó∂Èó¥Ôºö
                  static u8 last_adc_channel = ADC_CHANNEL_NONE;
                  if (last_adc_channel == adc_channel)
                  {
                      return;
                  }
                  last_adc_channel = adc_channel;
              #endif // ÂèØ‰ª•ËäÇÁúÅ7Â≠óËäÇÁ®ãÂ∫èÁ©∫Èó¥
  38   1      
  39   1          // switch (adc_channel)
  40   1          // {
  41   1          // case ADC_CHANNEL_CHARGE:
  42   1          //     // P04 AIN4 Ê£ÄÊµãÂÖÖÁîµÂè£‰º†ËøáÊù•ÁöÑadÂÄº
  43   1          //     ADC_CHS0 = 0x04; // ËΩØ‰ª∂Ëß¶ÂèëÔºåP04ÈÄöË∑Ø
  44   1          //     break;
  45   1          // case ADC_CHANNEL_BAT:
  46   1          //     // P05 AIN5 Ê£ÄÊµãÁîµÊ±†ÂàÜÂéãÂêéÁöÑadÂÄº
  47   1          //     ADC_CHS0 = 0x05; // ËΩØ‰ª∂Ëß¶ÂèëÔºåP05ÈÄöË∑Ø
  48   1          //     break;
  49   1          // case ADC_CHANNEL_MOTOR:
  50   1          //     // P06 AIN6 Ê£ÄÊµãÁîµÊú∫ÊòØÂê¶Â†µËΩ¨
C51 COMPILER V9.60.7.0   ADC                                                               05/05/2025 11:30:18 PAGE 2   

  51   1          //     ADC_CHS0 = 0x06; // ËΩØ‰ª∂Ëß¶ÂèëÔºåP06ÈÄöË∑Ø
  52   1          //     break;
  53   1      
  54   1          // default:
  55   1          //     break;
  56   1          // }
  57   1      
  58   1          // ‰ΩøÁî®if-elseËØ≠Âè•ÊØîswitchÊõ¥ËäÇÁúÅÁ®ãÂ∫èÁ©∫Èó¥
  59   1          if (ADC_CHANNEL_CHARGE == adc_channel)
  60   1          {
  61   2              // P04 AIN4 Ê£ÄÊµãÂÖÖÁîµÂè£‰º†ËøáÊù•ÁöÑadÂÄº
  62   2              ADC_CHS0 = 0x04; // ËΩØ‰ª∂Ëß¶ÂèëÔºåP04ÈÄöË∑Ø
  63   2          }
  64   1          else if (ADC_CHANNEL_BAT == adc_channel)
  65   1          {
  66   2              // P05 AIN5 Ê£ÄÊµãÁîµÊ±†ÂàÜÂéãÂêéÁöÑadÂÄº
  67   2              ADC_CHS0 = 0x05; // ËΩØ‰ª∂Ëß¶ÂèëÔºåP05ÈÄöË∑Ø
  68   2          }
  69   1          else if (ADC_CHANNEL_MOTOR == adc_channel)
  70   1          {
  71   2              // P06 AIN6 Ê£ÄÊµãÁîµÊú∫ÊòØÂê¶Â†µËΩ¨
  72   2              ADC_CHS0 = 0x06; // ËΩØ‰ª∂Ëß¶ÂèëÔºåP06ÈÄöË∑Ø
  73   2          }
  74   1          
  75   1          ADC_CFG0 = 0x14; // ‰ΩøËÉΩA/DËΩ¨Êç¢Ôºå‰ΩøËÉΩÈÄöÈÅì0ËΩ¨Êç¢
  76   1          delay_ms(1);     // ÂàáÊç¢adcÊ£ÄÊµãÁöÑÂºïËÑöÂêéÔºåË¶ÅÂª∂Êó∂‰∏ÄÊÆµÊó∂Èó¥ÔºåÁ≠âÂæÖadcÁ®≥ÂÆöÔºåÈò≤Ê≠¢ÊÑèÊ
             -ñô‰πãÂ§ñÁöÑÊ£ÄÊµãÁªìÊûú
  77   1      }
  78          
  79          // // Ëé∑ÂèñadcÂçïÊ¨°ËΩ¨Êç¢ÂêéÁöÑÂÄº
  80          // u16 adc_get_val_once(void)
  81          // {
  82          //     u16 g_temp_value = 0;
  83          
  84          //     ADC_CFG0 |= 0x01; // Ëß¶ÂèëADC0ËΩ¨Êç¢
  85          //     while (!(ADC_STA & 0x02))
  86          //         ;                                          // Á≠âÂæÖËΩ¨Êç¢ÂÆåÊàê
  87          //     ADC_STA = 0x02;                                // Ê∏ÖÈô§ADC0ËΩ¨Êç¢ÂÆåÊàêÊ†áÂøó‰Ωç
  88          //     g_temp_value = (ADC_DATAH0 << 4) | ADC_DATAL0; // ËØªÂèñADC0ÁöÑÂÄº
  89          
  90          //     return g_temp_value;
  91          // }
  92          
  93          // Ëé∑ÂèñadcÈááÈõÜ+Êª§Ê≥¢ÂêéÁöÑÂÄº
  94          u16 adc_get_val(void)
  95          {
  96   1          u8 i = 0; // adcÈááÈõÜÊ¨°Êï∞ÁöÑËÆ°Êï∞
  97   1          volatile u16 g_temp_value = 0;
  98   1          volatile u32 g_tmpbuff = 0;
  99   1          volatile u16 g_adcmax = 0;
 100   1          volatile u16 g_adcmin = 0xFFFF;
 101   1      
 102   1          // ÈááÈõÜ20Ê¨°ÔºåÂéªÊéâÂâç‰∏§Ê¨°ÈááÊ†∑ÔºåÂÜçÂéªÊéâ‰∏Ä‰∏™ÊúÄÂ§ßÂÄºÂíå‰∏Ä‰∏™ÊúÄÂ∞èÂÄºÔºåÂÜçÂèñÂπ≥ÂùáÂÄº
 103   1          for (i = 0; i < 20; i++)
 104   1          {
 105   2              ADC_CFG0 |= 0x01; // Ëß¶ÂèëADC0ËΩ¨Êç¢
 106   2              while (!(ADC_STA & 0x02))
 107   2                  ;                                          // Á≠âÂæÖËΩ¨Êç¢ÂÆåÊàê
 108   2              ADC_STA = 0x02;                                // Ê∏ÖÈô§ADC0ËΩ¨Êç¢ÂÆåÊàêÊ†áÂøó‰Ωç
 109   2              g_temp_value = (ADC_DATAH0 << 4) | ADC_DATAL0; // ËØªÂèñADC0ÁöÑÂÄº
 110   2      
 111   2              // g_temp_value = adc_get_val_once();
C51 COMPILER V9.60.7.0   ADC                                                               05/05/2025 11:30:18 PAGE 3   

 112   2      
 113   2              if (i < 2)
 114   2                  continue; // ‰∏¢ÂºÉÂâç‰∏§Ê¨°ÈááÊ†∑ÁöÑ
 115   2              if (g_temp_value > g_adcmax)
 116   2                  g_adcmax = g_temp_value; // ÊúÄÂ§ß
 117   2              if (g_temp_value < g_adcmin)
 118   2                  g_adcmin = g_temp_value; // ÊúÄÂ∞è
 119   2      
 120   2              g_tmpbuff += g_temp_value;
 121   2          }
 122   1      
 123   1          g_tmpbuff -= g_adcmax;           // ÂéªÊéâ‰∏Ä‰∏™ÊúÄÂ§ß
 124   1          g_tmpbuff -= g_adcmin;           // ÂéªÊéâ‰∏Ä‰∏™ÊúÄÂ∞è
 125   1          g_temp_value = (g_tmpbuff >> 4); // Èô§‰ª•16ÔºåÂèñÂπ≥ÂùáÂÄº
 126   1      
 127   1          return g_temp_value;
 128   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    221    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----      10
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  1 WARNING(S),  0 ERROR(S)
